import './styles/App.css'
import { useState, useEffect } from 'react'
import TrainingMode from './components/TrainingMode'
import { getRandomWords } from './scripts/utils'

const backendUrl = import.meta.env.VITE_BACKEND_URL;
if (!backendUrl) {
    console.error('Backend URL is not defined in environment variables');
}

function App() {
  const [word, setWord] = useState('')
  const [translation, setTranslation] = useState('')
  const [vocab, setVocab] = useState([])
  const [displayedWords, setDisplayedWords] = useState([])

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ fetchWords –≤–Ω—É—Ç—Ä–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const fetchWords = async () => {
    try {
      const response = await fetch(`${backendUrl}/words`);
      const data = await response.json();
      setVocab(data);
      setDisplayedWords(getRandomWords(data));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ–≤:', error);
    }
  };

  useEffect(() => {
    fetchWords(); // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–¥–µ—Å—å
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (word && translation) {
      try {
        const response = await fetch(`${backendUrl}/word`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ word: word, translation: translation }),
        });
        
        if (response.ok) {
          const newWord = await response.json();
          setVocab([...vocab, newWord]);
          setDisplayedWords(getRandomWords([...vocab, newWord]));
        } else {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞:', response.statusText);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error);
      }

      // –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞, –æ—á–∏—â–∞–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
      setWord('');
      setTranslation('');
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–æ–≤–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–Ω–æ–≤–æ
      await fetchWords(); // –¢–µ–ø–µ—Ä—å —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞
    }
  }

  return (
    <div className="app-container">
      <h1>Recallary üìùüßê</h1>
      
      <div className="input-section">
        <form onSubmit={handleSubmit}>
          <input
            type="text"
            value={word}
            onChange={(e) => setWord(e.target.value)}
            placeholder="Word"
            className="word-input"
          />
          <input
            type="text"
            value={translation}
            onChange={(e) => setTranslation(e.target.value)}
            placeholder="Translation"
            className="word-input"
          />
          <button type="submit" className="add-button">Add</button>
        </form>
      </div>

      <TrainingMode words={vocab} />

      <div className="words-list">
        <h2>Random 5 words from total { displayedWords.length }:</h2>
        <ul>
          {displayedWords.map((item, index) => (
            <li key={index} className="word-item">
              {item.word} - {item.translation}
            </li>
          ))}
        </ul>
      </div>
    </div>
  )
}

export default App